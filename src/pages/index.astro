---
import Headers from "../layouts/Headers.astro";
import Navbar from "../components/Navbar.astro";
import Intro from "../components/Intro.astro";
import GradientIntro from "../components/GradientIntro.astro";
import Interface from "../components/Interface.astro";
import Video from "../components/VideoSection.astro";
import Automatic from "../components/Automatic.astro";
import UndeniablyBlack from "../components/UndeniablyBlack.astro";
import SmartDesign from "../components/SmartDesign.astro";
import Peace from "../components/Peace.astro";
import Pricing from "../components/Pricing.astro";
import Footer from "../components/Footer.astro";
export interface Props {
  title: string;
}
---

<html lang="en" class="hide-scroll-bar bg-black">
  <Headers title="Your Title" description="Your Description" image="https://placehold.co/1920x1080" />
  <body class="overflow-x-hidden">
    <Navbar />
    <Intro />
    <GradientIntro />
    <Interface />
    <Video />
    <Automatic />
    <UndeniablyBlack />
    <SmartDesign />
    <Peace />
    <Pricing />
    <Footer />

    <script>
      // Refresh page on width resize so that on mobile when the browser hide's it's bottom bar, the page will not refresh
      let width = window.innerWidth;
      window.addEventListener("resize", () => {
        if (window.innerWidth !== width) {
          window.location.reload();
        }
      });

      document.addEventListener("DOMContentLoaded", function () {
        let lazyVideos = [].slice.call(document.querySelectorAll("video.lazy"));

        if ("IntersectionObserver" in window) {
          let lazyVideoObserver = new IntersectionObserver(function (entries, observer) {
            entries.forEach(function (video: any) {
              if (video.isIntersecting) {
                for (let source in video.target.children) {
                  let videoSource = video.target.children[source] as HTMLSourceElement;
                  if (typeof videoSource.tagName === "string" && videoSource.tagName === "SOURCE") {
                    videoSource.src = videoSource.dataset.src;
                  }
                }

                video.target.load();
                video.target.classList.remove("lazy");
                lazyVideoObserver.unobserve(video.target);
              }
            });
          });

          lazyVideos.forEach(function (lazyVideo) {
            lazyVideoObserver.observe(lazyVideo);
          });
        }
      });
    </script>
    <script src="../gsap"></script>
  </body>
</html>
